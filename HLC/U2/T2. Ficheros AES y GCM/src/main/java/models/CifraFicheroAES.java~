package models;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.spec.GCMParameterSpec;

import utils.FileWorker;
import utils.SecretKeyWorker;

public class CifraFicheroAES {
	private final static String pathEncrypted = "src/main/resources/encrypted/";
	private final static byte[] iv = new byte[12];

	private static void setIv() {
		for (int i = 0; i < iv.length; i++) {
			iv[i] = 0;
		}
	}

	public static void cifrarFichero(String pathFicheroIn, String ficheroOut, String passwd) {
		File file = new File(pathFicheroIn), outFile = new File(pathEncrypted + ficheroOut);
		setIv();
		SecretKey skey = null;
		GCMParameterSpec gcmspec = new GCMParameterSpec(128, iv);
		Cipher cipher = null;
		byte[] fileData = null;
		
		try {
			skey = SecretKeyWorker.getSecretKey(passwd, iv);
			cipher = Cipher.getInstance("AES/GCM/NoPadding");
			cipher.init(Cipher.ENCRYPT_MODE, skey, gcmspec);
		} catch (NoSuchAlgorithmException | InvalidKeySpecException e) {
			e.printStackTrace();
		} catch (NoSuchPaddingException e) {
			e.printStackTrace();
		} catch (InvalidKeyException e) {
			e.printStackTrace();
		} catch (InvalidAlgorithmParameterException e) {
			e.printStackTrace();
		}



		try {
			fileData = FileWorker.getBytes(file);
		} catch (IOException e) {
			e.printStackTrace();
		}

		byte[] encrypted = null;

		try {
			encrypted = cipher.doFinal(fileData);
		} catch (IllegalBlockSizeException | BadPaddingException e) {
			e.printStackTrace();
		}

		FileOutputStream fos = null;

		try {
			fos = new FileOutputStream(outFile);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}

		try {
			fos.write(encrypted);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
